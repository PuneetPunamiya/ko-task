apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ko
  namespace: ko
spec:
  params:
    - name: imageRegistry
      type: string
    - name: contextDir
      type: string
    - name: script
      type: string
    - name: applyName
      type: string
  workspaces:
    - name: source
    - name: kubeconfig
      optional: true
  steps:
    - name: ko
      image: quay.io/vinamra2807/ko@sha256:82a9041cfbe3ebf77a92e5248d69bc1ab62e979fc7779d85d5b3c1bd5fd08670 #gcr.io/tekton-releases/ko-ci
      workingDir: $(workspaces.source.path)/$(params.contextDir)
      env:
        - name: KO_DOCKER_REPO
          value: $(params.imageRegistry)
        - name: GOPATH
          value: /workspace/go
        - name: GO111MODULE
          value: "off"
      # args:
      #   - $(params.args)
      script: |
        if [ "$(workspaces.kubeconfig.bound)" == "true" ] && [[ -e $(workspaces.kubeconfig.path)/kubeconfig ]]; then
          export KUBECONFIG=$(workspaces.kubeconfig.path)/kubeconfig
        fi
        $(params.script)
        ls
    - name: kubectl
      image: gcr.io/cloud-builders/kubectl@sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753
      workingDir: $(workspaces.source.path)/$(params.contextDir)
      script: |
        cat $(workspaces.source.path)/$(params.contextDir)/$(params.applyName)
        kubectl apply -f $(params.applyName)
